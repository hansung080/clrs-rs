use std::ops::{AddAssign, Mul};

pub fn matrix_multiply<T, const N: usize>(a: &[[T; N]; N], b: &[[T; N]; N]) -> Box<[[T; N]; N]>
where
    T: Mul<Output = T> + AddAssign + Default + Copy,
{
    let mut c = [[T::default(); N]; N];
    for i in 0..N {
        for j in 0..N {
            for k in 0..N {
                c[i][j] += a[i][k] * b[k][j];
            }
        }
    }
    Box::new(c)
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn matrix_multiply_i32() {
        let empty: [[i32; 0]; 0] = [];
        assert_eq!(*matrix_multiply(&empty, &empty), empty);
        assert_eq!(*matrix_multiply(&[[2]], &[[3]]), [[6]]);
        assert_eq!(*matrix_multiply(
            &[
                [1, 2],
                [3, 4],
            ],
            &[
                [5, 6],
                [7, 8],
            ]),
            [
                [19, 22],
                [43, 50],
            ],
        );

        assert_eq!(*matrix_multiply(
            &[
                [1, 2, 3],
                [4, 5, 6],
                [7, 8, 9],
            ],
            &[
                [10, 11, 12],
                [13, 14, 15],
                [16, 17, 18],
            ]),
            [
                [ 84,  90,  96],
                [201, 216, 231],
                [318, 342, 366],
            ],
        );

        assert_eq!(*matrix_multiply(
            &[
                [ 1,  2,  3,  4],
                [ 5,  6,  7,  8],
                [ 9, 10, 11, 12],
                [13, 14, 15, 16],
            ],
            &[
                [17, 18, 19, 20],
                [21, 22, 23, 24],
                [25, 26, 27, 28],
                [29, 30, 31, 32],
            ]),
            [
                [ 250,  260,  270,  280],
                [ 618,  644,  670,  696],
                [ 986, 1028, 1070, 1112],
                [1354, 1412, 1470, 1528],
            ],
        );

        assert_eq!(*matrix_multiply(
            &[
                [ 1,  2,  3,  4,  5,  6,  7,  8],
                [ 9, 10, 11, 12, 13, 14, 15, 16],
                [17, 18, 19, 20, 21, 22, 23, 24],
                [25, 26, 27, 28, 29, 30, 31, 32],
                [33, 34, 35, 36, 37, 38, 39, 40],
                [41, 42, 43, 44, 45, 46, 47, 48],
                [49, 50, 51, 52, 53, 54, 55, 56],
                [57, 58, 59, 60, 61, 62, 63, 64],
            ],
            &[
                [ 65,  66,  67,  68,  69,  70,  71,  72],
                [ 73,  74,  75,  76,  77,  78,  79,  80],
                [ 81,  82,  83,  84,  85,  86,  87,  88],
                [ 89,  90,  91,  92,  93,  94,  95,  96],
                [ 97,  98,  99, 100, 101, 102, 103, 104],
                [105, 106, 107, 108, 109, 110, 111, 112],
                [113, 114, 115, 116, 117, 118, 119, 120],
                [121, 122, 123, 124, 125, 126, 127, 128],
            ]),
            [
                [ 3684,  3720,  3756,  3792,  3828,  3864,  3900,  3936],
                [ 9636,  9736,  9836,  9936, 10036, 10136, 10236, 10336],
                [15588, 15752, 15916, 16080, 16244, 16408, 16572, 16736],
                [21540, 21768, 21996, 22224, 22452, 22680, 22908, 23136],
                [27492, 27784, 28076, 28368, 28660, 28952, 29244, 29536],
                [33444, 33800, 34156, 34512, 34868, 35224, 35580, 35936],
                [39396, 39816, 40236, 40656, 41076, 41496, 41916, 42336],
                [45348, 45832, 46316, 46800, 47284, 47768, 48252, 48736],
            ],
        );
    }

    #[test]
    fn matrix_multiply_f64() {
        assert_eq!(*matrix_multiply(
            &[
                [ 1.0,  2.0,  3.0,  4.0],
                [ 5.0,  6.0,  7.0,  8.0],
                [ 9.0, 10.0, 11.0, 12.0],
                [13.0, 14.0, 15.0, 16.0],
            ],
            &[
                [17.0, 18.0, 19.0, 20.0],
                [21.0, 22.0, 23.0, 24.0],
                [25.0, 26.0, 27.0, 28.0],
                [29.0, 30.0, 31.0, 32.0],
            ]),
            [
                [ 250.0,  260.0,  270.0,  280.0],
                [ 618.0,  644.0,  670.0,  696.0],
                [ 986.0, 1028.0, 1070.0, 1112.0],
                [1354.0, 1412.0, 1470.0, 1528.0],
            ],
        );
    }
}
